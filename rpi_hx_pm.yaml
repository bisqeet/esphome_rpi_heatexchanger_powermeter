esphome:
  name: rpi-heatex-powermeter
  friendly_name: rpi-heatex-powermeter

rp2040:
  board: rpipicow
  framework:
    # Required until https://github.com/platformio/platform-raspberrypi/pull/36 is merged
    platform_version: https://github.com/maxgerhardt/platform-raspberrypi.git

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret encryption_key

ota:
  password: !secret ota_password


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  id: wifi_id


  # Enable fallback hotspot in case wifi connection fails
  ap:
    ssid: "Esphome-Web-0E7013"
    password: !secret ap_password

time:
  - platform: homeassistant
    id: esptime


#sensor for powermeter
#captive_portal:
sensor:
  - platform: pulse_meter
    name: 'rpi-hx-pm-energy'
    id: rpi_pm_energy # Optional ID, necessary if you want to calculate the total daily energy
    unit_of_measurement: 'W'
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    pin: GPIO22
    internal_filter: 25ms
    internal_filter_mode: PULSE
    filters:
      - multiply: 6 # (60s / impulse constant) * (1000W / 1kW)
      - filter_out: NaN


    total:
      name: "RPI HX PM Total"
      id: rpi_hx_pm_total
      unit_of_measurement: "kWh"
      device_class: energy
      state_class: total_increasing
      accuracy_decimals: 3
      filters:
        - multiply: 0.001  # (1/1000 pulses per kWh)
        # - average_throttle: 10s
        # - filter_out: NaN

  - platform: total_daily_energy
    name: 'RPI HX PM Daily Total'
    id: rpi_hx_pm_total_daily_energy
    power_id: rpi_pm_energy
    unit_of_measurement: 'kWh'
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    filters:  
      - multiply: 0.001 # Multiplication factor from W to kW is 0.001

  - platform: homeassistant
    name: "hx yearly total"
    entity_id: sensor.rpi_hx_pm_yearly_total
    id: rpi_hx_pm_yearly_total


binary_sensor:
  - platform: status
    name: "Energy meter: status"
#************************************

font:
  - file: 'Roboto-Regular.ttf'
    id: font1
    size: 14


i2c:
  sda: GPIO20
  scl: GPIO21
  frequency: 800 kHz


display:
  - platform: ssd1306_i2c
    model: "SH1107 128x128"
    rotation: 270
    #reset_pin: 
    address: 0x3C
    lambda: |-
      // Print time in HH:MM format
      it.line(0,20,128,20);
      it.line(0,110,128,110);
      it.strftime(0, 128, id(font1), TextAlign::BASELINE_LEFT, "%d-%m-%Y",id(esptime).now() );
      it.strftime(128, 128, id(font1),TextAlign::BASELINE_RIGHT, "%H:%M", id(esptime).now());
      it.printf(0, 15, id(font1), TextAlign::BASELINE_LEFT, "rpi-hx-pm");

      it.print(0, 25, id(font1),  "Power:");
      it.printf(128, 25, id(font1),TextAlign::TOP_RIGHT,  "W");

      it.print(0, 45, id(font1),  "Today:");
      it.printf(128, 45, id(font1),TextAlign::TOP_RIGHT,  "kWh");

      it.print(0, 65, id(font1),  "Annum:");
      it.printf(128, 65, id(font1),TextAlign::TOP_RIGHT,  "kWh");

      it.print(0, 85, id(font1),  "Avg:");
      it.printf(128, 85, id(font1),TextAlign::TOP_RIGHT,  "kWh");

      if (id(wifi_id).is_connected()) {
        it.print (128, 15, id(font1), TextAlign::BASELINE_RIGHT, "ONLINE");
      } else {
        it.print (128, 15, id(font1), TextAlign::BASELINE_RIGHT, "OFFLINE");
      }


      it.printf (90, 25, id(font1), TextAlign::TOP_RIGHT, "%.1f", id(rpi_pm_energy).state);

      it.printf (90, 45, id(font1), TextAlign::TOP_RIGHT, "%.3f",id(rpi_hx_pm_total_daily_energy).state);

      it.printf (90, 65, id(font1), TextAlign::TOP_RIGHT, "%.1f",id(rpi_hx_pm_yearly_total).state);

      it.print (90, 85, id(font1), TextAlign::TOP_RIGHT, "t.b.d.");
